import numpy as np

Sbox = np.array(
           [[0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76],
            [0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0],
            [0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15],
            [0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75],
            [0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84],
            [0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF],
            [0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8],
            [0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2],
            [0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73],
            [0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB],
            [0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79],
            [0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08],
            [0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A],
            [0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E],
            [0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF],
            [0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]]
            )
Sbox_inv = np.array([
            [0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB],
            [0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB],
            [0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E],
            [0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25],
            [0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92],
            [0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84],
            [0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06],
            [0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B],
            [0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73],
            [0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E],
            [0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B],
            [0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4],
            [0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F],
            [0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF],
            [0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61],
            [0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D]]
            )
MixCol = np.array([
            [0x02, 0x03, 0x01, 0x01],
            [0x01, 0x02, 0x03, 0x01],
            [0x01, 0x01, 0x02, 0x03],
            [0x03, 0x01, 0x01, 0x02]
])

MixCol_inv = np.array([
            [0x0e, 0x0b, 0x0d, 0x09],
            [0x09, 0x0e, 0x0b, 0x0d],
            [0x0d, 0x09, 0x0e, 0x0b],
            [0x0b, 0x0d, 0x09, 0x0e]
])



def prepare_text(text):
    '''takes 32 hexa char"string" and convert it to 4x4 matrix integers'''
    out = []
    if len(text) != 32 : return None
    for i in range(0,32,2):
        c = text[i:i+2]
        integer = int(c,16)
        # h = hex(integer)
        out.append(integer)
        # out.append(c)
    
    out=np.array(out).reshape(4,4)
    return out

def return_text(matrix):
    '''takes 4x4 matrix and returns it back to 32 hexa char string'''
    out=""
    for row in matrix:
        for e in row:
            h =hex(e)[2:]
            if len(h)<2:
                for _ in range(2-len(h)):
                    h="0"+h

            out+=h
            # out+=e
    return out.upper()


def sub_bytes(matrix):
    '''takes 4x4 matrix and returns 4x4 matrix of integers after substitution'''
    out=np.zeros_like(matrix,dtype='int32')
    for i in range(matrix.shape[0]):
        for j in range(matrix.shape[1]):
            e= matrix[i,j]
            # r=int(e[0],16)
            # c=int(e[1],16)
            x = e >> 4
            y = e & 15
            out[i,j]= Sbox[x,y]
    
    return out

def sub_bytes_inv(matrix):
    '''takes 4x4 matrix and returns 4x4 matrix of integers after substitution'''
    out=np.zeros_like(matrix,dtype='int32')
    for i in range(matrix.shape[0]):
        for j in range(matrix.shape[1]):
            e= matrix[i,j]
            # r=int(e[0],16)
            # c=int(e[1],16)
            x = e >> 4
            y = e & 15
            out[i,j]= Sbox_inv[x,y]
    
    return out


def shift_rows(matrix, mode="left"):
    '''takes 4x4 matrix and rotates each row based on the mode'''
    out=np.zeros_like(matrix,dtype='int32')
    out[0]= matrix[0]
    shift=[0,1,2,3]
    if mode=="left":
        for i in range(1,matrix.shape[0]):
            row= matrix[i]
            out[i,0:4-shift[i]]= row[shift[i]:] 
            out[i,4-shift[i]:]= row[:shift[i]] 
    elif mode == "right":
        for i in range(1,matrix.shape[0]):
            row= matrix[i]
            out[i,shift[i]:]= row[0:4-shift[i]] 
            out[i,0:shift[i]]= row[4-shift[i]:] 

    return out


def mul_2(v):
    s = v << 1
    s &= 0xff
    if (v & 128) != 0:
        s = s ^ 0x1b
    return s

def mul_3(v):
    return mul_2(v) ^ v

def mix_columns(matrix):
    out = np.zeros_like(matrix,dtype='int32')
    for i in range(matrix.shape[1]):
        col = matrix[:,i]
        first = mul_2(col[0]) ^ mul_3(col[1]) ^ col[2] ^ col[3]
        second = mul_2(col[1]) ^ mul_3(col[2]) ^ col[3] ^ col[0]
        third = mul_2(col[2]) ^ mul_3(col[3]) ^ col[0] ^ col[1]
        forth= mul_2(col[3]) ^ mul_3(col[0]) ^ col[1] ^ col[2]
        out[:,i]= [first, second, third, forth]
    
    return out

def mix_columns_inv(matrix):
    return mix_columns(mix_columns(mix_columns(matrix)))

def add_round_key(matrix, key):
    return matrix ^ key

def key_schedule(orig_key):
    out =[]
    old_key= orig_key
    RC= [1,2,4,8,16,32,64,128,27,54]
    new_key= np.zeros_like(old_key,dtype='int32')
    for i in  range(10):
        last_col = np.copy(old_key[:,3])

        ##shift left one
        temp =last_col[0]
        last_col[:3] = last_col[1:]
        last_col[-1]= temp
        ###
        sub= sub_bytes(np.array(last_col).reshape(1,-1))
        const= np.array([RC[i] ,0,0,0] ,dtype='int32')

        new_key[:,0] = sub ^ const ^ old_key[:,0]
        new_key[:,1] = new_key[:,0] ^ old_key[:,1]
        new_key[:,2] = new_key[:,1] ^ old_key[:,2]
        new_key[:,3] = new_key[:,2] ^ old_key[:,3]
        out.append(np.copy(new_key))
        old_key= np.copy(new_key)
    
    return np.array(out)

def round(msg , key):
    msg= sub_bytes(msg)
    msg= shift_rows(msg)
    msg= mix_columns(msg)
    msg = add_round_key(msg,key)
    return msg

def final_round(msg,key):
    msg= sub_bytes(msg)
    msg= shift_rows(msg)
    msg = add_round_key(msg,key)
    return msg


def encrypt(text , orig_key):
    msg= text ^ orig_key
    keys= key_schedule(orig_key)
    for i in range(9):
        msg= round(msg,keys[i])
    
    msg= final_round(msg, keys[-1])

    return msg




# f= np.array([0x01, 0x01,0x01,0x01]).reshape(1,-1)
# b=sub_bytes(f)
# print(sub_bytes_inv(b))

x=prepare_text("0123456789ABCDEF0123456789ABCDEF")
print(return_text(encrypt(x,x)))
# out = key_schedule(x)
# print(out.shape)
# print(out)

# key=np.array([[0x54, 0x68, 0x61, 0x74], 
# [0x73, 0x20, 0x6D, 0x79], 
# [0x20, 0x4B, 0x75, 0x6E],
# [0x67, 0x20, 0x46, 0x75]])

# key=key.T

               

# k = np.array([[0x56, 0x08, 0x20, 0x07],
# [0xC7, 0x1A, 0xB1, 0x8F],
# [0x76, 0x43, 0x55, 0x69], 
# [0xA0, 0x3A, 0xF7, 0xFA]])

# print(key_schedule(key)[1] == k.T)
# a =np.array( [212, 212, 212, 213]).reshape(-1,1)
# print(sub_bytes(np.array( ['01', '01', '01', '01']).reshape(-1,1)))
# mixed = mix_columns(a)
# unmixed = mix_columns_inv(mixed)
# print(mixed)
# print(unmixed)




# x=sub_bytes(prepare_text("0123456789abcdef0123456789abcdef"))
# print(x)
# z=shift_rows(x,"right")
# print(z)
# print(MixCol_inv)
# print(Sbox)




